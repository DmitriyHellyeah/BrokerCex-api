# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserInfoDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounts': 'list[UserAccount]',
        'domain': 'str',
        'full_name': 'str',
        'login': 'str',
        'username': 'str',
        'version': 'int'
    }

    attribute_map = {
        'accounts': 'accounts',
        'domain': 'domain',
        'full_name': 'fullName',
        'login': 'login',
        'username': 'username',
        'version': 'version'
    }

    def __init__(self, accounts=None, domain=None, full_name=None, login=None, username=None, version=None):  # noqa: E501
        """UserInfoDetails - a model defined in Swagger"""  # noqa: E501

        self._accounts = None
        self._domain = None
        self._full_name = None
        self._login = None
        self._username = None
        self._version = None
        self.discriminator = None

        if accounts is not None:
            self.accounts = accounts
        if domain is not None:
            self.domain = domain
        if full_name is not None:
            self.full_name = full_name
        if login is not None:
            self.login = login
        if username is not None:
            self.username = username
        if version is not None:
            self.version = version

    @property
    def accounts(self):
        """Gets the accounts of this UserInfoDetails.  # noqa: E501


        :return: The accounts of this UserInfoDetails.  # noqa: E501
        :rtype: list[UserAccount]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this UserInfoDetails.


        :param accounts: The accounts of this UserInfoDetails.  # noqa: E501
        :type: list[UserAccount]
        """

        self._accounts = accounts

    @property
    def domain(self):
        """Gets the domain of this UserInfoDetails.  # noqa: E501


        :return: The domain of this UserInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this UserInfoDetails.


        :param domain: The domain of this UserInfoDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def full_name(self):
        """Gets the full_name of this UserInfoDetails.  # noqa: E501


        :return: The full_name of this UserInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserInfoDetails.


        :param full_name: The full_name of this UserInfoDetails.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def login(self):
        """Gets the login of this UserInfoDetails.  # noqa: E501


        :return: The login of this UserInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserInfoDetails.


        :param login: The login of this UserInfoDetails.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def username(self):
        """Gets the username of this UserInfoDetails.  # noqa: E501


        :return: The username of this UserInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserInfoDetails.


        :param username: The username of this UserInfoDetails.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def version(self):
        """Gets the version of this UserInfoDetails.  # noqa: E501


        :return: The version of this UserInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UserInfoDetails.


        :param version: The version of this UserInfoDetails.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserInfoDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfoDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
