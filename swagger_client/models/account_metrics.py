# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'balance': 'object',
        'equity': 'object',
        'margin': 'object',
        'margin_free': 'object',
        'open_orders_count': 'int',
        'open_pl': 'object',
        'open_positions_count': 'int',
        'positions': 'list[UserPosition]',
        'total_pl': 'object',
        'version': 'object'
    }

    attribute_map = {
        'account': 'account',
        'balance': 'balance',
        'equity': 'equity',
        'margin': 'margin',
        'margin_free': 'marginFree',
        'open_orders_count': 'openOrdersCount',
        'open_pl': 'openPl',
        'open_positions_count': 'openPositionsCount',
        'positions': 'positions',
        'total_pl': 'totalPl',
        'version': 'version'
    }

    def __init__(self, account=None, balance=None, equity=None, margin=None, margin_free=None, open_orders_count=None, open_pl=None, open_positions_count=None, positions=None, total_pl=None, version=None):  # noqa: E501
        """AccountMetrics - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._balance = None
        self._equity = None
        self._margin = None
        self._margin_free = None
        self._open_orders_count = None
        self._open_pl = None
        self._open_positions_count = None
        self._positions = None
        self._total_pl = None
        self._version = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if balance is not None:
            self.balance = balance
        if equity is not None:
            self.equity = equity
        if margin is not None:
            self.margin = margin
        if margin_free is not None:
            self.margin_free = margin_free
        if open_orders_count is not None:
            self.open_orders_count = open_orders_count
        if open_pl is not None:
            self.open_pl = open_pl
        if open_positions_count is not None:
            self.open_positions_count = open_positions_count
        if positions is not None:
            self.positions = positions
        if total_pl is not None:
            self.total_pl = total_pl
        if version is not None:
            self.version = version

    @property
    def account(self):
        """Gets the account of this AccountMetrics.  # noqa: E501


        :return: The account of this AccountMetrics.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountMetrics.


        :param account: The account of this AccountMetrics.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def balance(self):
        """Gets the balance of this AccountMetrics.  # noqa: E501


        :return: The balance of this AccountMetrics.  # noqa: E501
        :rtype: object
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountMetrics.


        :param balance: The balance of this AccountMetrics.  # noqa: E501
        :type: object
        """

        self._balance = balance

    @property
    def equity(self):
        """Gets the equity of this AccountMetrics.  # noqa: E501


        :return: The equity of this AccountMetrics.  # noqa: E501
        :rtype: object
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this AccountMetrics.


        :param equity: The equity of this AccountMetrics.  # noqa: E501
        :type: object
        """

        self._equity = equity

    @property
    def margin(self):
        """Gets the margin of this AccountMetrics.  # noqa: E501


        :return: The margin of this AccountMetrics.  # noqa: E501
        :rtype: object
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this AccountMetrics.


        :param margin: The margin of this AccountMetrics.  # noqa: E501
        :type: object
        """

        self._margin = margin

    @property
    def margin_free(self):
        """Gets the margin_free of this AccountMetrics.  # noqa: E501


        :return: The margin_free of this AccountMetrics.  # noqa: E501
        :rtype: object
        """
        return self._margin_free

    @margin_free.setter
    def margin_free(self, margin_free):
        """Sets the margin_free of this AccountMetrics.


        :param margin_free: The margin_free of this AccountMetrics.  # noqa: E501
        :type: object
        """

        self._margin_free = margin_free

    @property
    def open_orders_count(self):
        """Gets the open_orders_count of this AccountMetrics.  # noqa: E501


        :return: The open_orders_count of this AccountMetrics.  # noqa: E501
        :rtype: int
        """
        return self._open_orders_count

    @open_orders_count.setter
    def open_orders_count(self, open_orders_count):
        """Sets the open_orders_count of this AccountMetrics.


        :param open_orders_count: The open_orders_count of this AccountMetrics.  # noqa: E501
        :type: int
        """

        self._open_orders_count = open_orders_count

    @property
    def open_pl(self):
        """Gets the open_pl of this AccountMetrics.  # noqa: E501


        :return: The open_pl of this AccountMetrics.  # noqa: E501
        :rtype: object
        """
        return self._open_pl

    @open_pl.setter
    def open_pl(self, open_pl):
        """Sets the open_pl of this AccountMetrics.


        :param open_pl: The open_pl of this AccountMetrics.  # noqa: E501
        :type: object
        """

        self._open_pl = open_pl

    @property
    def open_positions_count(self):
        """Gets the open_positions_count of this AccountMetrics.  # noqa: E501


        :return: The open_positions_count of this AccountMetrics.  # noqa: E501
        :rtype: int
        """
        return self._open_positions_count

    @open_positions_count.setter
    def open_positions_count(self, open_positions_count):
        """Sets the open_positions_count of this AccountMetrics.


        :param open_positions_count: The open_positions_count of this AccountMetrics.  # noqa: E501
        :type: int
        """

        self._open_positions_count = open_positions_count

    @property
    def positions(self):
        """Gets the positions of this AccountMetrics.  # noqa: E501


        :return: The positions of this AccountMetrics.  # noqa: E501
        :rtype: list[UserPosition]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this AccountMetrics.


        :param positions: The positions of this AccountMetrics.  # noqa: E501
        :type: list[UserPosition]
        """

        self._positions = positions

    @property
    def total_pl(self):
        """Gets the total_pl of this AccountMetrics.  # noqa: E501


        :return: The total_pl of this AccountMetrics.  # noqa: E501
        :rtype: object
        """
        return self._total_pl

    @total_pl.setter
    def total_pl(self, total_pl):
        """Sets the total_pl of this AccountMetrics.


        :param total_pl: The total_pl of this AccountMetrics.  # noqa: E501
        :type: object
        """

        self._total_pl = total_pl

    @property
    def version(self):
        """Gets the version of this AccountMetrics.  # noqa: E501


        :return: The version of this AccountMetrics.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AccountMetrics.


        :param version: The version of this AccountMetrics.  # noqa: E501
        :type: object
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
