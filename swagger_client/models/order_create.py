# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'expire_date': 'str',
        'instrument': 'str',
        'limit_price': 'int',
        'order_code': 'str',
        'position_code': 'str',
        'position_effect': 'str',
        'price_link': 'str',
        'price_offset': 'int',
        'quantity': 'int',
        'side': 'str',
        'stop_price': 'int',
        'tif': 'str',
        'type': 'str'
    }

    attribute_map = {
        'account': 'Account',
        'expire_date': 'ExpireDate',
        'instrument': 'Instrument',
        'limit_price': 'LimitPrice',
        'order_code': 'OrderCode',
        'position_code': 'PositionCode',
        'position_effect': 'PositionEffect',
        'price_link': 'PriceLink',
        'price_offset': 'PriceOffset',
        'quantity': 'Quantity',
        'side': 'Side',
        'stop_price': 'StopPrice',
        'tif': 'Tif',
        'type': 'Type'
    }

    def __init__(self, account=None, expire_date=None, instrument=None, limit_price=None, order_code=None, position_code=None, position_effect=None, price_link=None, price_offset=None, quantity=None, side=None, stop_price=None, tif=None, type=None):  # noqa: E501
        """OrderCreate - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._expire_date = None
        self._instrument = None
        self._limit_price = None
        self._order_code = None
        self._position_code = None
        self._position_effect = None
        self._price_link = None
        self._price_offset = None
        self._quantity = None
        self._side = None
        self._stop_price = None
        self._tif = None
        self._type = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if expire_date is not None:
            self.expire_date = expire_date
        if instrument is not None:
            self.instrument = instrument
        if limit_price is not None:
            self.limit_price = limit_price
        if order_code is not None:
            self.order_code = order_code
        if position_code is not None:
            self.position_code = position_code
        if position_effect is not None:
            self.position_effect = position_effect
        if price_link is not None:
            self.price_link = price_link
        if price_offset is not None:
            self.price_offset = price_offset
        if quantity is not None:
            self.quantity = quantity
        if side is not None:
            self.side = side
        if stop_price is not None:
            self.stop_price = stop_price
        if tif is not None:
            self.tif = tif
        if type is not None:
            self.type = type

    @property
    def account(self):
        """Gets the account of this OrderCreate.  # noqa: E501


        :return: The account of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this OrderCreate.


        :param account: The account of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def expire_date(self):
        """Gets the expire_date of this OrderCreate.  # noqa: E501


        :return: The expire_date of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this OrderCreate.


        :param expire_date: The expire_date of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._expire_date = expire_date

    @property
    def instrument(self):
        """Gets the instrument of this OrderCreate.  # noqa: E501


        :return: The instrument of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this OrderCreate.


        :param instrument: The instrument of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def limit_price(self):
        """Gets the limit_price of this OrderCreate.  # noqa: E501


        :return: The limit_price of this OrderCreate.  # noqa: E501
        :rtype: int
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this OrderCreate.


        :param limit_price: The limit_price of this OrderCreate.  # noqa: E501
        :type: int
        """

        self._limit_price = limit_price

    @property
    def order_code(self):
        """Gets the order_code of this OrderCreate.  # noqa: E501


        :return: The order_code of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._order_code

    @order_code.setter
    def order_code(self, order_code):
        """Sets the order_code of this OrderCreate.


        :param order_code: The order_code of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._order_code = order_code

    @property
    def position_code(self):
        """Gets the position_code of this OrderCreate.  # noqa: E501


        :return: The position_code of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._position_code

    @position_code.setter
    def position_code(self, position_code):
        """Sets the position_code of this OrderCreate.


        :param position_code: The position_code of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._position_code = position_code

    @property
    def position_effect(self):
        """Gets the position_effect of this OrderCreate.  # noqa: E501


        :return: The position_effect of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._position_effect

    @position_effect.setter
    def position_effect(self, position_effect):
        """Sets the position_effect of this OrderCreate.


        :param position_effect: The position_effect of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._position_effect = position_effect

    @property
    def price_link(self):
        """Gets the price_link of this OrderCreate.  # noqa: E501


        :return: The price_link of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._price_link

    @price_link.setter
    def price_link(self, price_link):
        """Sets the price_link of this OrderCreate.


        :param price_link: The price_link of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._price_link = price_link

    @property
    def price_offset(self):
        """Gets the price_offset of this OrderCreate.  # noqa: E501


        :return: The price_offset of this OrderCreate.  # noqa: E501
        :rtype: int
        """
        return self._price_offset

    @price_offset.setter
    def price_offset(self, price_offset):
        """Sets the price_offset of this OrderCreate.


        :param price_offset: The price_offset of this OrderCreate.  # noqa: E501
        :type: int
        """

        self._price_offset = price_offset

    @property
    def quantity(self):
        """Gets the quantity of this OrderCreate.  # noqa: E501


        :return: The quantity of this OrderCreate.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderCreate.


        :param quantity: The quantity of this OrderCreate.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this OrderCreate.  # noqa: E501


        :return: The side of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderCreate.


        :param side: The side of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def stop_price(self):
        """Gets the stop_price of this OrderCreate.  # noqa: E501


        :return: The stop_price of this OrderCreate.  # noqa: E501
        :rtype: int
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this OrderCreate.


        :param stop_price: The stop_price of this OrderCreate.  # noqa: E501
        :type: int
        """

        self._stop_price = stop_price

    @property
    def tif(self):
        """Gets the tif of this OrderCreate.  # noqa: E501


        :return: The tif of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._tif

    @tif.setter
    def tif(self, tif):
        """Sets the tif of this OrderCreate.


        :param tif: The tif of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._tif = tif

    @property
    def type(self):
        """Gets the type of this OrderCreate.  # noqa: E501


        :return: The type of this OrderCreate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderCreate.


        :param type: The type of this OrderCreate.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
