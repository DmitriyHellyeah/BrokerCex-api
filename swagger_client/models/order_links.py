# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_type': 'str',
        'linked_client_order_id': 'str',
        'linked_order': 'str'
    }

    attribute_map = {
        'link_type': 'linkType',
        'linked_client_order_id': 'linkedClientOrderId',
        'linked_order': 'linkedOrder'
    }

    def __init__(self, link_type=None, linked_client_order_id=None, linked_order=None):  # noqa: E501
        """OrderLinks - a model defined in Swagger"""  # noqa: E501

        self._link_type = None
        self._linked_client_order_id = None
        self._linked_order = None
        self.discriminator = None

        if link_type is not None:
            self.link_type = link_type
        if linked_client_order_id is not None:
            self.linked_client_order_id = linked_client_order_id
        if linked_order is not None:
            self.linked_order = linked_order

    @property
    def link_type(self):
        """Gets the link_type of this OrderLinks.  # noqa: E501


        :return: The link_type of this OrderLinks.  # noqa: E501
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this OrderLinks.


        :param link_type: The link_type of this OrderLinks.  # noqa: E501
        :type: str
        """

        self._link_type = link_type

    @property
    def linked_client_order_id(self):
        """Gets the linked_client_order_id of this OrderLinks.  # noqa: E501


        :return: The linked_client_order_id of this OrderLinks.  # noqa: E501
        :rtype: str
        """
        return self._linked_client_order_id

    @linked_client_order_id.setter
    def linked_client_order_id(self, linked_client_order_id):
        """Sets the linked_client_order_id of this OrderLinks.


        :param linked_client_order_id: The linked_client_order_id of this OrderLinks.  # noqa: E501
        :type: str
        """

        self._linked_client_order_id = linked_client_order_id

    @property
    def linked_order(self):
        """Gets the linked_order of this OrderLinks.  # noqa: E501


        :return: The linked_order of this OrderLinks.  # noqa: E501
        :rtype: str
        """
        return self._linked_order

    @linked_order.setter
    def linked_order(self, linked_order):
        """Sets the linked_order of this OrderLinks.


        :param linked_order: The linked_order of this OrderLinks.  # noqa: E501
        :type: str
        """

        self._linked_order = linked_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
