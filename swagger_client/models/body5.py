# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body5(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'at_least_version': 'int',
        'at_most_version': 'int',
        'completed_from': 'datetime',
        'completed_to': 'datetime',
        'for_instrument': 'list[str]',
        'in_status': 'list[str]',
        'issued_from': 'datetime',
        'issued_to': 'datetime',
        'limit': 'int',
        'of_type': 'list[str]',
        'page': 'int',
        'page_size': 'int',
        'period': 'datetime',
        'side': 'str',
        'transaction_from': 'datetime',
        'transaction_to': 'datetime',
        'with_client_id': 'list[str]',
        'with_order_id': 'list[str]'
    }

    attribute_map = {
        'at_least_version': 'at-least-version',
        'at_most_version': 'at-most-version',
        'completed_from': 'completed-from',
        'completed_to': 'completed-to',
        'for_instrument': 'for-instrument',
        'in_status': 'in-status',
        'issued_from': 'issued-from',
        'issued_to': 'issued-to',
        'limit': 'limit',
        'of_type': 'of-type',
        'page': 'page',
        'page_size': 'page-size',
        'period': 'period',
        'side': 'side',
        'transaction_from': 'transaction-from',
        'transaction_to': 'transaction-to',
        'with_client_id': 'with-client-id',
        'with_order_id': 'with-order-id'
    }

    def __init__(self, at_least_version=None, at_most_version=None, completed_from=None, completed_to=None, for_instrument=None, in_status=None, issued_from=None, issued_to=None, limit=None, of_type=None, page=None, page_size=None, period=None, side=None, transaction_from=None, transaction_to=None, with_client_id=None, with_order_id=None):  # noqa: E501
        """Body5 - a model defined in Swagger"""  # noqa: E501

        self._at_least_version = None
        self._at_most_version = None
        self._completed_from = None
        self._completed_to = None
        self._for_instrument = None
        self._in_status = None
        self._issued_from = None
        self._issued_to = None
        self._limit = None
        self._of_type = None
        self._page = None
        self._page_size = None
        self._period = None
        self._side = None
        self._transaction_from = None
        self._transaction_to = None
        self._with_client_id = None
        self._with_order_id = None
        self.discriminator = None

        if at_least_version is not None:
            self.at_least_version = at_least_version
        if at_most_version is not None:
            self.at_most_version = at_most_version
        if completed_from is not None:
            self.completed_from = completed_from
        if completed_to is not None:
            self.completed_to = completed_to
        if for_instrument is not None:
            self.for_instrument = for_instrument
        if in_status is not None:
            self.in_status = in_status
        if issued_from is not None:
            self.issued_from = issued_from
        if issued_to is not None:
            self.issued_to = issued_to
        if limit is not None:
            self.limit = limit
        if of_type is not None:
            self.of_type = of_type
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if period is not None:
            self.period = period
        if side is not None:
            self.side = side
        if transaction_from is not None:
            self.transaction_from = transaction_from
        if transaction_to is not None:
            self.transaction_to = transaction_to
        if with_client_id is not None:
            self.with_client_id = with_client_id
        if with_order_id is not None:
            self.with_order_id = with_order_id

    @property
    def at_least_version(self):
        """Gets the at_least_version of this Body5.  # noqa: E501


        :return: The at_least_version of this Body5.  # noqa: E501
        :rtype: int
        """
        return self._at_least_version

    @at_least_version.setter
    def at_least_version(self, at_least_version):
        """Sets the at_least_version of this Body5.


        :param at_least_version: The at_least_version of this Body5.  # noqa: E501
        :type: int
        """

        self._at_least_version = at_least_version

    @property
    def at_most_version(self):
        """Gets the at_most_version of this Body5.  # noqa: E501


        :return: The at_most_version of this Body5.  # noqa: E501
        :rtype: int
        """
        return self._at_most_version

    @at_most_version.setter
    def at_most_version(self, at_most_version):
        """Sets the at_most_version of this Body5.


        :param at_most_version: The at_most_version of this Body5.  # noqa: E501
        :type: int
        """

        self._at_most_version = at_most_version

    @property
    def completed_from(self):
        """Gets the completed_from of this Body5.  # noqa: E501


        :return: The completed_from of this Body5.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_from

    @completed_from.setter
    def completed_from(self, completed_from):
        """Sets the completed_from of this Body5.


        :param completed_from: The completed_from of this Body5.  # noqa: E501
        :type: datetime
        """

        self._completed_from = completed_from

    @property
    def completed_to(self):
        """Gets the completed_to of this Body5.  # noqa: E501


        :return: The completed_to of this Body5.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_to

    @completed_to.setter
    def completed_to(self, completed_to):
        """Sets the completed_to of this Body5.


        :param completed_to: The completed_to of this Body5.  # noqa: E501
        :type: datetime
        """

        self._completed_to = completed_to

    @property
    def for_instrument(self):
        """Gets the for_instrument of this Body5.  # noqa: E501


        :return: The for_instrument of this Body5.  # noqa: E501
        :rtype: list[str]
        """
        return self._for_instrument

    @for_instrument.setter
    def for_instrument(self, for_instrument):
        """Sets the for_instrument of this Body5.


        :param for_instrument: The for_instrument of this Body5.  # noqa: E501
        :type: list[str]
        """

        self._for_instrument = for_instrument

    @property
    def in_status(self):
        """Gets the in_status of this Body5.  # noqa: E501


        :return: The in_status of this Body5.  # noqa: E501
        :rtype: list[str]
        """
        return self._in_status

    @in_status.setter
    def in_status(self, in_status):
        """Sets the in_status of this Body5.


        :param in_status: The in_status of this Body5.  # noqa: E501
        :type: list[str]
        """

        self._in_status = in_status

    @property
    def issued_from(self):
        """Gets the issued_from of this Body5.  # noqa: E501


        :return: The issued_from of this Body5.  # noqa: E501
        :rtype: datetime
        """
        return self._issued_from

    @issued_from.setter
    def issued_from(self, issued_from):
        """Sets the issued_from of this Body5.


        :param issued_from: The issued_from of this Body5.  # noqa: E501
        :type: datetime
        """

        self._issued_from = issued_from

    @property
    def issued_to(self):
        """Gets the issued_to of this Body5.  # noqa: E501


        :return: The issued_to of this Body5.  # noqa: E501
        :rtype: datetime
        """
        return self._issued_to

    @issued_to.setter
    def issued_to(self, issued_to):
        """Sets the issued_to of this Body5.


        :param issued_to: The issued_to of this Body5.  # noqa: E501
        :type: datetime
        """

        self._issued_to = issued_to

    @property
    def limit(self):
        """Gets the limit of this Body5.  # noqa: E501


        :return: The limit of this Body5.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Body5.


        :param limit: The limit of this Body5.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def of_type(self):
        """Gets the of_type of this Body5.  # noqa: E501


        :return: The of_type of this Body5.  # noqa: E501
        :rtype: list[str]
        """
        return self._of_type

    @of_type.setter
    def of_type(self, of_type):
        """Sets the of_type of this Body5.


        :param of_type: The of_type of this Body5.  # noqa: E501
        :type: list[str]
        """

        self._of_type = of_type

    @property
    def page(self):
        """Gets the page of this Body5.  # noqa: E501


        :return: The page of this Body5.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Body5.


        :param page: The page of this Body5.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this Body5.  # noqa: E501


        :return: The page_size of this Body5.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Body5.


        :param page_size: The page_size of this Body5.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def period(self):
        """Gets the period of this Body5.  # noqa: E501


        :return: The period of this Body5.  # noqa: E501
        :rtype: datetime
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Body5.


        :param period: The period of this Body5.  # noqa: E501
        :type: datetime
        """

        self._period = period

    @property
    def side(self):
        """Gets the side of this Body5.  # noqa: E501


        :return: The side of this Body5.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Body5.


        :param side: The side of this Body5.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def transaction_from(self):
        """Gets the transaction_from of this Body5.  # noqa: E501


        :return: The transaction_from of this Body5.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_from

    @transaction_from.setter
    def transaction_from(self, transaction_from):
        """Sets the transaction_from of this Body5.


        :param transaction_from: The transaction_from of this Body5.  # noqa: E501
        :type: datetime
        """

        self._transaction_from = transaction_from

    @property
    def transaction_to(self):
        """Gets the transaction_to of this Body5.  # noqa: E501


        :return: The transaction_to of this Body5.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_to

    @transaction_to.setter
    def transaction_to(self, transaction_to):
        """Sets the transaction_to of this Body5.


        :param transaction_to: The transaction_to of this Body5.  # noqa: E501
        :type: datetime
        """

        self._transaction_to = transaction_to

    @property
    def with_client_id(self):
        """Gets the with_client_id of this Body5.  # noqa: E501


        :return: The with_client_id of this Body5.  # noqa: E501
        :rtype: list[str]
        """
        return self._with_client_id

    @with_client_id.setter
    def with_client_id(self, with_client_id):
        """Sets the with_client_id of this Body5.


        :param with_client_id: The with_client_id of this Body5.  # noqa: E501
        :type: list[str]
        """

        self._with_client_id = with_client_id

    @property
    def with_order_id(self):
        """Gets the with_order_id of this Body5.  # noqa: E501


        :return: The with_order_id of this Body5.  # noqa: E501
        :rtype: list[str]
        """
        return self._with_order_id

    @with_order_id.setter
    def with_order_id(self, with_order_id):
        """Sets the with_order_id of this Body5.


        :param with_order_id: The with_order_id of this Body5.  # noqa: E501
        :type: list[str]
        """

        self._with_order_id = with_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body5, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body5):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
