# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MarketdataEventTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'candle_type': 'str',
        'count': 'int',
        'format': 'str',
        'from_time': 'datetime',
        'to_time': 'datetime',
        'type': 'str'
    }

    attribute_map = {
        'candle_type': 'candleType',
        'count': 'count',
        'format': 'format',
        'from_time': 'fromTime',
        'to_time': 'toTime',
        'type': 'type'
    }

    def __init__(self, candle_type=None, count=None, format=None, from_time=None, to_time=None, type=None):  # noqa: E501
        """MarketdataEventTypes - a model defined in Swagger"""  # noqa: E501

        self._candle_type = None
        self._count = None
        self._format = None
        self._from_time = None
        self._to_time = None
        self._type = None
        self.discriminator = None

        if candle_type is not None:
            self.candle_type = candle_type
        if count is not None:
            self.count = count
        if format is not None:
            self.format = format
        if from_time is not None:
            self.from_time = from_time
        if to_time is not None:
            self.to_time = to_time
        if type is not None:
            self.type = type

    @property
    def candle_type(self):
        """Gets the candle_type of this MarketdataEventTypes.  # noqa: E501

        Required for Candle type. Candle type, one of next values: <br /> m (1 min) <br /> 5m (5 min) <br /> 15m (15 minutes) <br /> 30m (30 minutes) <br /> h (1 hour) <br /> 2h (2 hours) <br /> 4h (4 hours) <br /> d (Day) <br /> w (Week) <br /> mo (Month) <br />  # noqa: E501

        :return: The candle_type of this MarketdataEventTypes.  # noqa: E501
        :rtype: str
        """
        return self._candle_type

    @candle_type.setter
    def candle_type(self, candle_type):
        """Sets the candle_type of this MarketdataEventTypes.

        Required for Candle type. Candle type, one of next values: <br /> m (1 min) <br /> 5m (5 min) <br /> 15m (15 minutes) <br /> 30m (30 minutes) <br /> h (1 hour) <br /> 2h (2 hours) <br /> 4h (4 hours) <br /> d (Day) <br /> w (Week) <br /> mo (Month) <br />  # noqa: E501

        :param candle_type: The candle_type of this MarketdataEventTypes.  # noqa: E501
        :type: str
        """

        self._candle_type = candle_type

    @property
    def count(self):
        """Gets the count of this MarketdataEventTypes.  # noqa: E501

        Maximum count of candles in response. If not defined, used value predefined on server side. <br /> If count of candles in [fromTime, toTime] period more, than count value, <br /> exactly count value of candles will be returned in response. More old candles will be filtered.  # noqa: E501

        :return: The count of this MarketdataEventTypes.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MarketdataEventTypes.

        Maximum count of candles in response. If not defined, used value predefined on server side. <br /> If count of candles in [fromTime, toTime] period more, than count value, <br /> exactly count value of candles will be returned in response. More old candles will be filtered.  # noqa: E501

        :param count: The count of this MarketdataEventTypes.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def format(self):
        """Gets the format of this MarketdataEventTypes.  # noqa: E501

        Quote and Candle type are supported  # noqa: E501

        :return: The format of this MarketdataEventTypes.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MarketdataEventTypes.

        Quote and Candle type are supported  # noqa: E501

        :param format: The format of this MarketdataEventTypes.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def from_time(self):
        """Gets the from_time of this MarketdataEventTypes.  # noqa: E501

        Required for Candle type. UTC time to get history from.  # noqa: E501

        :return: The from_time of this MarketdataEventTypes.  # noqa: E501
        :rtype: datetime
        """
        return self._from_time

    @from_time.setter
    def from_time(self, from_time):
        """Sets the from_time of this MarketdataEventTypes.

        Required for Candle type. UTC time to get history from.  # noqa: E501

        :param from_time: The from_time of this MarketdataEventTypes.  # noqa: E501
        :type: datetime
        """

        self._from_time = from_time

    @property
    def to_time(self):
        """Gets the to_time of this MarketdataEventTypes.  # noqa: E501

        Required for Candle type. UTC time to get history to.  # noqa: E501

        :return: The to_time of this MarketdataEventTypes.  # noqa: E501
        :rtype: datetime
        """
        return self._to_time

    @to_time.setter
    def to_time(self, to_time):
        """Sets the to_time of this MarketdataEventTypes.

        Required for Candle type. UTC time to get history to.  # noqa: E501

        :param to_time: The to_time of this MarketdataEventTypes.  # noqa: E501
        :type: datetime
        """

        self._to_time = to_time

    @property
    def type(self):
        """Gets the type of this MarketdataEventTypes.  # noqa: E501

        Now only COMPACT type is supported  # noqa: E501

        :return: The type of this MarketdataEventTypes.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MarketdataEventTypes.

        Now only COMPACT type is supported  # noqa: E501

        :param type: The type of this MarketdataEventTypes.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketdataEventTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketdataEventTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
