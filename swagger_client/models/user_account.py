# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'account_status': 'str',
        'base_currency': 'str',
        'owner': 'str',
        'position_based': 'bool',
        'pricing_stream': 'str',
        'registration_time': 'datetime',
        'version': 'int'
    }

    attribute_map = {
        'account': 'account',
        'account_status': 'accountStatus',
        'base_currency': 'baseCurrency',
        'owner': 'owner',
        'position_based': 'positionBased',
        'pricing_stream': 'pricingStream',
        'registration_time': 'registrationTime',
        'version': 'version'
    }

    def __init__(self, account=None, account_status=None, base_currency=None, owner=None, position_based=None, pricing_stream=None, registration_time=None, version=None):  # noqa: E501
        """UserAccount - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._account_status = None
        self._base_currency = None
        self._owner = None
        self._position_based = None
        self._pricing_stream = None
        self._registration_time = None
        self._version = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if account_status is not None:
            self.account_status = account_status
        if base_currency is not None:
            self.base_currency = base_currency
        if owner is not None:
            self.owner = owner
        if position_based is not None:
            self.position_based = position_based
        if pricing_stream is not None:
            self.pricing_stream = pricing_stream
        if registration_time is not None:
            self.registration_time = registration_time
        if version is not None:
            self.version = version

    @property
    def account(self):
        """Gets the account of this UserAccount.  # noqa: E501


        :return: The account of this UserAccount.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this UserAccount.


        :param account: The account of this UserAccount.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def account_status(self):
        """Gets the account_status of this UserAccount.  # noqa: E501


        :return: The account_status of this UserAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this UserAccount.


        :param account_status: The account_status of this UserAccount.  # noqa: E501
        :type: str
        """

        self._account_status = account_status

    @property
    def base_currency(self):
        """Gets the base_currency of this UserAccount.  # noqa: E501


        :return: The base_currency of this UserAccount.  # noqa: E501
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this UserAccount.


        :param base_currency: The base_currency of this UserAccount.  # noqa: E501
        :type: str
        """

        self._base_currency = base_currency

    @property
    def owner(self):
        """Gets the owner of this UserAccount.  # noqa: E501


        :return: The owner of this UserAccount.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this UserAccount.


        :param owner: The owner of this UserAccount.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def position_based(self):
        """Gets the position_based of this UserAccount.  # noqa: E501


        :return: The position_based of this UserAccount.  # noqa: E501
        :rtype: bool
        """
        return self._position_based

    @position_based.setter
    def position_based(self, position_based):
        """Sets the position_based of this UserAccount.


        :param position_based: The position_based of this UserAccount.  # noqa: E501
        :type: bool
        """

        self._position_based = position_based

    @property
    def pricing_stream(self):
        """Gets the pricing_stream of this UserAccount.  # noqa: E501


        :return: The pricing_stream of this UserAccount.  # noqa: E501
        :rtype: str
        """
        return self._pricing_stream

    @pricing_stream.setter
    def pricing_stream(self, pricing_stream):
        """Sets the pricing_stream of this UserAccount.


        :param pricing_stream: The pricing_stream of this UserAccount.  # noqa: E501
        :type: str
        """

        self._pricing_stream = pricing_stream

    @property
    def registration_time(self):
        """Gets the registration_time of this UserAccount.  # noqa: E501


        :return: The registration_time of this UserAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_time

    @registration_time.setter
    def registration_time(self, registration_time):
        """Sets the registration_time of this UserAccount.


        :param registration_time: The registration_time of this UserAccount.  # noqa: E501
        :type: datetime
        """

        self._registration_time = registration_time

    @property
    def version(self):
        """Gets the version of this UserAccount.  # noqa: E501


        :return: The version of this UserAccount.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UserAccount.


        :param version: The version of this UserAccount.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
