# coding: utf-8

"""
    Broker API.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec. There are no TOS at this moment, use at your own risk we take no responsibility  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: support@cexbro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asks': 'list[list[str]]',
        'bids': 'list[list[str]]',
        'pair': 'str'
    }

    attribute_map = {
        'asks': 'asks',
        'bids': 'bids',
        'pair': 'pair'
    }

    def __init__(self, asks=None, bids=None, pair=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501

        self._asks = None
        self._bids = None
        self._pair = None
        self.discriminator = None

        if asks is not None:
            self.asks = asks
        if bids is not None:
            self.bids = bids
        if pair is not None:
            self.pair = pair

    @property
    def asks(self):
        """Gets the asks of this InlineResponse2001.  # noqa: E501


        :return: The asks of this InlineResponse2001.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._asks

    @asks.setter
    def asks(self, asks):
        """Sets the asks of this InlineResponse2001.


        :param asks: The asks of this InlineResponse2001.  # noqa: E501
        :type: list[list[str]]
        """

        self._asks = asks

    @property
    def bids(self):
        """Gets the bids of this InlineResponse2001.  # noqa: E501


        :return: The bids of this InlineResponse2001.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._bids

    @bids.setter
    def bids(self, bids):
        """Sets the bids of this InlineResponse2001.


        :param bids: The bids of this InlineResponse2001.  # noqa: E501
        :type: list[list[str]]
        """

        self._bids = bids

    @property
    def pair(self):
        """Gets the pair of this InlineResponse2001.  # noqa: E501


        :return: The pair of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._pair

    @pair.setter
    def pair(self, pair):
        """Sets the pair of this InlineResponse2001.


        :param pair: The pair of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._pair = pair

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
